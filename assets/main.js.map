{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/edit/edit.component.html","webpack:///./src/app/auth/edit/edit.component.scss","webpack:///./src/app/auth/edit/edit.component.ts","webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/login/login.component.scss","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/register-confirm/register-confirm.component.html","webpack:///./src/app/auth/register-confirm/register-confirm.component.scss","webpack:///./src/app/auth/register-confirm/register-confirm.component.ts","webpack:///./src/app/auth/register-successful/register-successful.component.html","webpack:///./src/app/auth/register-successful/register-successful.component.scss","webpack:///./src/app/auth/register-successful/register-successful.component.ts","webpack:///./src/app/auth/register/register.component.html","webpack:///./src/app/auth/register/register.component.scss","webpack:///./src/app/auth/register/register.component.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.scss","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/shared/auth/auth.service.ts","webpack:///./src/app/shared/auth/csrf.service.ts","webpack:///./src/app/shared/auth/http-interceptor.service.ts","webpack:///./src/app/shared/auth/only-logged-in.guard.ts","webpack:///./src/app/shared/material-design/material-design.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { OnlyLoggedInGuard } from './shared/auth/only-logged-in.guard';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './auth/login/login.component';\nimport { RegisterComponent } from './auth/register/register.component';\nimport { RegisterSuccessfulComponent } from './auth/register-successful/register-successful.component';\nimport { RegisterConfirmComponent } from './auth/register-confirm/register-confirm.component';\nimport { EditComponent } from './auth/edit/edit.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HomeComponent,\n        pathMatch: 'full',\n        data: { state: 'home' }\n    },\n    {\n        path: 'login',\n        component: LoginComponent,\n        data: { state: 'login' }\n    },\n    {\n        path: 'register',\n        component: RegisterComponent,\n        data: { state: 'register' }\n    },\n    {\n        path: 'register/successful',\n        component: RegisterSuccessfulComponent,\n        data: { state: 'registerSuccessful' }\n    },\n    {\n        path: 'register/confirm',\n        component: RegisterConfirmComponent,\n        data: { state: 'registerConfirm' }\n    },\n    {\n        path: 'user/edit',\n        canActivate: [OnlyLoggedInGuard],\n        component: EditComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<mat-toolbar color=\\\"primary\\\">\\n  <span>Welcome to {{title}}<span *ngIf=\\\"authenticatedUser\\\">&nbsp;{{ authenticatedUser.first_name }} {{authenticatedUser.last_name}}</span>!</span>\\n  <div fxFlex=\\\"1 1 auto\\\"></div>\\n  <a mat-button routerLink=\\\"/\\\" routerLinkActive=\\\"active\\\" [routerLinkActiveOptions]=\\\"{exact: true}\\\">Home</a>\\n  <!-- <a *ngIf=\\\"!authenticated\\\" mat-button routerLink=\\\"/register\\\" routerLinkActive=\\\"active\\\">Register</a> -->\\n  <a *ngIf=\\\"!authenticated\\\" mat-button routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">Login</a>\\n  <a *ngIf=\\\"!authenticated\\\" mat-button routerLink=\\\"/register\\\" routerLinkActive=\\\"active\\\">Register</a>\\n  <a *ngIf=\\\"authenticated\\\" mat-button routerLink=\\\"/user/edit\\\" routerLinkActive=\\\"active\\\">Edit user</a>\\n  <a *ngIf=\\\"authenticated\\\" mat-button (click)=\\\"logout()\\\">Logout</a>\\n</mat-toolbar>\\n<div class=\\\"mat-typography\\\">\\n    <router-outlet></router-outlet>\\n</div>\\n\\n\"","module.exports = \"\"","import { Component } from '@angular/core';\nimport { environment } from '../environments/environment';\nimport { SailsService } from 'angular2-sails';\nimport { AuthService } from './shared/auth/auth.service';\nimport { User } from './shared/user/user';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Sails Angular';\n\n  constructor(private _sailsService: SailsService,\n    private authService: AuthService,\n    private router: Router,\n    private snackbar: MatSnackBar){}\n\n  ngOnInit() {\n     //Init Sails service and request CSRF Token and check login\n     let opts = {\n      url: environment.apiURL,\n      transports: ['websocket'],\n      reconnection: true\n    }\n    this._sailsService.connect(opts);\n\n    //this.requestCSRFToken()\n    this.checkLogin();\n  }\n\n  checkLogin() {\n    this.authService.checkLogin()\n      .subscribe();\n  }\n\n  logout() {\n    this.authService.logout()\n    .subscribe(() => {\n      this.router.navigate(['login']);\n      this.snackbar.open('Successfully logged out', '', {\n        duration: 3000\n      });\n    }, (err) => {\n      console.log(err);\n    });\n  }\n\n  get authenticated(): boolean {\n    return this.authService.isAuthenticated();\n  }\n\n  get authenticatedUser(): User {\n    return this.authService.getAuthenticatedUser();\n  }\n  \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { SailsModule } from \"angular2-sails\";\nimport { HttpInterceptorService } from './shared/auth/http-interceptor.service';\nimport { AuthService } from './shared/auth/auth.service';\nimport { MaterialDesignModule } from './shared/material-design/material-design.module';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './auth/login/login.component';\nimport { RegisterComponent } from './auth/register/register.component';\nimport { RegisterSuccessfulComponent } from './auth/register-successful/register-successful.component';\nimport { RegisterConfirmComponent } from './auth/register-confirm/register-confirm.component';\nimport { EditComponent } from './auth/edit/edit.component';\n\n\nexport function appInitFactory(authService: AuthService): () => Promise<any> {\n  return () => authService.checkLogin().toPromise();\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    LoginComponent,\n    RegisterComponent,\n    RegisterConfirmComponent,\n    RegisterSuccessfulComponent,\n    EditComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialDesignModule,\n    SailsModule.forRoot(),\n    HttpClientModule,\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpInterceptorService,\n      multi: true\n    },\n    {provide: APP_INITIALIZER, useFactory: appInitFactory, deps: [AuthService], multi: true}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"editForm\\\" *ngIf=\\\"editForm\\\">\\n  <div class=\\\"edit-box\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n  <mat-card fxFlex=\\\"90\\\" fxFlex.lg=\\\"50\\\">\\n    <mat-card-title class=\\\"edit-box-title\\\">\\n      Edit User\\n    </mat-card-title>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\n            <div fxFlex=\\\"100\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n              <div fxFlex=\\\"30\\\" >\\n                  <img class=\\\"card-img\\\" src=\\\"./assets/img/digitale-nachhaltigkeit.png\\\">\\n              </div>\\n            </div>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Firstname\\\" type=\\\"text\\\" formControlName=\\\"first_name\\\" required>\\n              <mat-icon matSuffix>person</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Lastname\\\" type=\\\"text\\\" formControlName=\\\"last_name\\\" requried>\\n              <mat-icon matSuffix>person</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Email\\\" type=\\\"text\\\" formControlName=\\\"email\\\" required>\\n              <mat-icon matSuffix>mail</mat-icon>\\n              <mat-error *ngIf=\\\"email.invalid\\\">Email ist ungültig</mat-error>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Street\\\" type=\\\"text\\\" formControlName=\\\"street\\\" required>\\n              <mat-icon matSuffix>place</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"ZIP Code\\\" type=\\\"number\\\" formControlName=\\\"zip_code\\\" required>\\n              <mat-icon matSuffix>place</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"City\\\" type=\\\"text\\\" formControlName=\\\"city\\\" required>\\n              <mat-icon matSuffix>place</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n                <input matInput placeholder=\\\"New password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" text=\\\"password\\\">\\n                <mat-hint align=\\\"end\\\">(Min 10. Chars): {{password.value.length}} / 10</mat-hint>\\n                <mat-icon matSuffix>lock</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Repeat new password\\\" type=\\\"password\\\" text=\\\"Repeat Password\\\" formControlName=\\\"confirm_password\\\">\\n              <mat-icon matSuffix>lock</mat-icon>\\n              <mat-error *ngIf=\\\"confirm_password.invalid\\\">Passwords do not match</mat-error>\\n          </mat-form-field>\\n          <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n            <input matInput placeholder=\\\"Current Password\\\" type=\\\"password\\\" text=\\\"Repeat Password\\\" formControlName=\\\"old_password\\\" required>\\n            <mat-icon matSuffix>lock</mat-icon>\\n            <mat-error *ngIf=\\\"old_password.invalid\\\">Current Password required</mat-error>\\n        </mat-form-field>\\n        <div fxFlex=\\\"100\\\" style=\\\"text-align: center\\\">\\n            <button mat-raised-button [disabled]=\\\"editForm.invalid\\\" class=\\\"edit-button\\\">\\n              <mat-icon>input</mat-icon> Save\\n            </button>\\n          </div>\\n          </div>\\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n</form>\\n\"","module.exports = \".edit-box {\\n  min-height: calc(100vh - 64px); }\\n\\n.edit-box-title {\\n  margin: -24px -24px 20px !important;\\n  align-content: center;\\n  align-items: center;\\n  display: flex;\\n  justify-content: center;\\n  padding: 20px;\\n  background: #ffd740; }\\n\\n.edit-button {\\n  margin-top: 20px; }\\n\\n.mat-form-field {\\n  padding: 0 10px; }\\n\\n/* .ng-invalid:not(form)  {\\n     border-left: 5px solid #a94442;\\n   } */\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '../../../../node_modules/@angular/forms';\nimport { User } from '../../shared/user/user';\nimport { NavigationExtras, Router } from '../../../../node_modules/@angular/router';\nimport { AuthService } from '../../shared/auth/auth.service';\nimport { MatSnackBar } from '../../../../node_modules/@angular/material';\nimport { initChangeDetectorIfExisting } from '../../../../node_modules/@angular/core/src/render3/instructions';\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.scss']\n})\nexport class EditComponent implements OnInit {\n\n  editForm: FormGroup;\n  \n  constructor(private authService: AuthService,\n    private router: Router,\n    private snackbar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.editForm = new FormGroup({\n      'first_name': new FormControl(this.user.first_name, [\n        Validators.required\n      ]),\n      'last_name': new FormControl(this.user.last_name, [\n        Validators.required\n      ]),\n      'email': new FormControl(this.user.email, [\n        Validators.required,\n        Validators.email\n      ]),\n      'street': new FormControl(this.user.street, [\n        Validators.required\n      ]),\n      'zip_code': new FormControl(this.user.zip_code, [\n        Validators.required\n      ]),\n      'city': new FormControl(this.user.city, [\n        Validators.required\n      ]),\n      'password': new FormControl('', [\n        Validators.minLength(10)\n      ]),\n      'confirm_password': new FormControl('', [\n        this.passwordConfirming.bind(this),\n        Validators.minLength(10)\n      ]),\n      'old_password': new FormControl('', [\n        Validators.required\n      ]),\n    });\n  }\n\n  passwordConfirming(fieldControl: FormControl): { invalidConfirmation: boolean } {\n    if(this.editForm){\n      return (fieldControl.value !== this.editForm.get('password').value) ?\n        { invalidConfirmation: true } : null;\n    }\n  }\n\n  get user() {\n    return this.authService.getAuthenticatedUser();\n  }\n\n  get password() {\n    return this.editForm.get('password');\n  }\n\n  get confirm_password() {\n    return this.editForm.get('confirm_password');\n  }\n\n  get old_password() {\n    return this.editForm.get('old_password');\n  }\n\n  get email() {\n    return this.editForm.get('email');\n  }\n\n  onSubmit():boolean {\n    if (this.editForm.invalid) {\n      return false;\n    } else {\n      let inputs = this.editForm.value;\n      if(!inputs.password){\n        delete inputs.password;\n        delete inputs.password_confirm;\n      }\n      this.authService.update(inputs)\n      .subscribe((user: User) => {\n        let navigationExtras: NavigationExtras = {\n          queryParams: user\n        }\n        this.snackbar.open('Successfully updated user', '', {\n          duration: 3000,\n          panelClass: 'success'\n        });\n      }, (err) => {\n        if(err.status === 401)\n          this.snackbar.open('Wrong password', '', {\n            duration: 3000,\n            panelClass: 'fail'\n          });\n        else {\n          this.snackbar.open('Email already registered', '', {\n            duration: 3000,\n            panelClass: 'fail'\n          });\n        }\n      });\n    }\n  }\n}\n","module.exports = \"\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"loginForm\\\">\\n  <div class=\\\"login-box\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n  <mat-card fxFlex=\\\"90\\\" fxFlex.lg=\\\"30\\\">\\n    <mat-card-title class=\\\"login-box-title\\\">\\n      Login\\n    </mat-card-title>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\n            <div fxFlex=\\\"100\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n              <div fxFlex=\\\"30\\\" >\\n                  <img class=\\\"card-img\\\" src=\\\"./assets/img/digitale-nachhaltigkeit.png\\\">\\n              </div>\\n            </div>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\">\\n              <input matInput placeholder=\\\"Email\\\" type=\\\"text\\\" formControlName=\\\"email\\\">\\n              <mat-icon matSuffix>mail</mat-icon>\\n              <mat-error *ngIf=\\\"email.invalid\\\">Email ist ungültig</mat-error>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\">\\n                <input matInput placeholder=\\\"Passwort\\\" type=\\\"password\\\" formControlName=\\\"password\\\" text=\\\"password\\\">\\n                <mat-icon matSuffix>lock</mat-icon>\\n            </mat-form-field>\\n            <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"loginForm.invalid\\\" class=\\\"login-button\\\">\\n              <mat-icon>input</mat-icon> Login\\n            </button>\\n          </div>\\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n</form>\\n\"","module.exports = \".login-box {\\n  min-height: calc(100vh - 64px); }\\n\\n.login-box-title {\\n  margin: -24px -24px 20px !important;\\n  align-content: center;\\n  align-items: center;\\n  display: flex;\\n  justify-content: center;\\n  padding: 20px;\\n  background: #ffd740; }\\n\\n.mat-form-field {\\n  padding: 0 10px; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { AuthService } from '../../shared/auth/auth.service';\nimport { User } from '../../shared/user/user';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription } from '../../../../node_modules/rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  redirect: string;\n  sub: Subscription;\n\n  constructor(private authService: AuthService,\n    private router: Router,\n    private snackbar: MatSnackBar,\n    private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.sub = this.activatedRoute.queryParams.subscribe(params => {\n      this.redirect = params['return'];\n    });\n    this.loginForm = new FormGroup({\n      'email': new FormControl('', [\n        Validators.required,\n        Validators.email]),\n      'password': new FormControl('', [\n        Validators.required,\n        Validators.minLength(10),\n      ]),\n    });\n  }\n\n  get email() {\n    return this.loginForm.get('email');\n  }\n\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      return false;\n    } else {\n      this.authService.login(this.loginForm.value)\n      .subscribe((user: User) => {\n        this.snackbar.open(`Hi ${user.first_name}`, '', {\n          duration: 3000,\n        });\n        if(this.redirect)\n          this.router.navigate([this.redirect]);\n        else\n          this.router.navigate(['']);\n      }, (err) => {\n        console.log(err);\n        this.snackbar.open('Invalid email or password', '', {\n          duration: 3000,\n          panelClass: 'fail'\n        })\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n}\n","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" style=\\\"min-height: calc(100vh - 64px)\\\">\\n  <div *ngIf=\\\"loading\\\">\\n      <mat-spinner></mat-spinner>\\n  </div>\\n  <div *ngIf=\\\"!loading && confirmSuccess\\\">\\n    <h1 class=\\\"mat-display-1\\\">Email erfolgreich bestätigt!\\n      <mat-icon>thumb_up</mat-icon>\\n    </h1>\\n    <p>Du bist nun dazu berechtigt, dich der\\n      <b>Crowdfin</b> Community anzuschliessen.</p>\\n  </div>\\n  <a mat-raised-button *ngIf=\\\"!loading && confirmSuccess\\\" color=\\\"accent\\\" routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">Login</a>\\n  <div *ngIf=\\\"!loading && !confirmSuccess\\\">\\n    <h1 class=\\\"mat-display-1\\\">Email konnte nicht bestätigt werden!\\n      <mat-icon>thumb_down</mat-icon>\\n    </h1>\\n    <p>Überprüfe bitte, ob du den richtigen Link aufgerufen hast oder kontaktiere den Support.</p>\\n  </div>\\n  <a mat-raised-button *ngIf=\\\"!loading && !confirmSuccess\\\" color=\\\"accent\\\" routerLink=\\\"/support\\\" routerLinkActive=\\\"active\\\">Support</a>\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../shared/auth/auth.service';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'app-register-confirm',\n  templateUrl: './register-confirm.component.html',\n  styleUrls: ['./register-confirm.component.scss']\n})\nexport class RegisterConfirmComponent implements OnInit {\n\n  confirmSuccess: boolean;\n  loading: boolean;\n\n  constructor(private route: ActivatedRoute,\n    private authService: AuthService,\n    private snackbar: MatSnackBar) {\n      this.loading = true;\n    }\n\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      this.authService.confirm(params)\n      .subscribe((res) => {\n        this.confirmSuccess = true;\n        this.loading = false;\n      }, (err) => {\n        this.confirmSuccess = false;\n        this.loading = false;\n      });\n    });\n  }\n\n}\n","module.exports = \"<div fxLayout fxLayoutAlign=\\\"center center\\\" style=\\\"min-height: calc(100vh - 64px)\\\">\\n  <div>\\n      <h1 class=\\\"mat-display-1\\\">Successfully registered! <mat-icon>thumb_up</mat-icon></h1>\\n      <p>Thank you <b>{{user.first_name}} {{user.last_name}}</b> for your registration<br>\\n      Please confirm your email address by clicking on the link sent to your\\n      personal mail account (<i>{{user.email}}</i>).</p>\\n  </div>\\n </div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { User } from '../../shared/user/user';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-register-successful',\n  templateUrl: './register-successful.component.html',\n  styleUrls: ['./register-successful.component.scss']\n})\nexport class RegisterSuccessfulComponent implements OnInit {\n\n  user: User;\n  sub: Subscription;\n\n  constructor(private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.sub = this.route.queryParams.subscribe(params => {\n      this.user = params as User;\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n}\n","module.exports = \"\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"registerForm\\\">\\n  <div class=\\\"login-box\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n  <mat-card fxFlex=\\\"90\\\" fxFlex.lg=\\\"50\\\">\\n    <mat-card-title class=\\\"login-box-title\\\">\\n      Register\\n    </mat-card-title>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\n            <div fxFlex=\\\"100\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n              <div fxFlex=\\\"30\\\" >\\n                  <img class=\\\"card-img\\\" src=\\\"./assets/img/digitale-nachhaltigkeit.png\\\">\\n              </div>\\n            </div>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Firstname\\\" type=\\\"text\\\" formControlName=\\\"first_name\\\" required>\\n              <mat-icon matSuffix>person</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Lastname\\\" type=\\\"text\\\" formControlName=\\\"last_name\\\" requried>\\n              <mat-icon matSuffix>person</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Email\\\" type=\\\"text\\\" formControlName=\\\"email\\\" required>\\n              <mat-icon matSuffix>mail</mat-icon>\\n              <mat-error *ngIf=\\\"email.invalid\\\">Email is invalid</mat-error>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Street\\\" type=\\\"text\\\" formControlName=\\\"street\\\" required>\\n              <mat-icon matSuffix>place</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"ZIP Code\\\" type=\\\"number\\\" formControlName=\\\"zip_code\\\" required>\\n              <mat-icon matSuffix>place</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"City\\\" type=\\\"text\\\" formControlName=\\\"city\\\" required>\\n              <mat-icon matSuffix>place</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n                <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" text=\\\"password\\\" required>\\n                <mat-hint align=\\\"end\\\">(Min 10. Characters): {{password.value.length}} / 10</mat-hint>\\n                <mat-icon matSuffix>lock</mat-icon>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"justifier\\\" fxFlex=\\\"100\\\" fxFlex.lg=\\\"50\\\">\\n              <input matInput placeholder=\\\"Repeat Password\\\" type=\\\"password\\\" text=\\\"Repeat Password\\\" formControlName=\\\"confirm_password\\\" required>\\n              <mat-icon matSuffix>lock</mat-icon>\\n              <mat-error *ngIf=\\\"confirm_password.invalid\\\">Passwords do not match</mat-error>\\n          </mat-form-field>\\n            <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"registerForm.invalid\\\" class=\\\"login-button\\\">\\n              <mat-icon>input</mat-icon> Register\\n            </button>\\n          </div>\\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n</form>\\n\"","module.exports = \".login-box {\\n  min-height: calc(100vh - 64px); }\\n\\n.login-box-title {\\n  margin: -24px -24px 20px !important;\\n  align-content: center;\\n  align-items: center;\\n  display: flex;\\n  justify-content: center;\\n  padding: 20px;\\n  background: #ffd740; }\\n\\n.login-button {\\n  margin-top: 20px; }\\n\\n.mat-form-field {\\n  padding: 0 10px; }\\n\\n/* .ng-invalid:not(form)  {\\n    border-left: 5px solid #a94442;\\n  } */\\n\"","import { Component, OnInit } from '@angular/core';\nimport { User } from '../../shared/user/user';\nimport { AuthService } from \"../../shared/auth/auth.service\";\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { NavigationExtras, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n\n  constructor(private authService: AuthService,\n    private router: Router,\n    private snackbar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.registerForm = new FormGroup({\n      'first_name': new FormControl('', [\n        Validators.required\n      ]),\n      'last_name': new FormControl('', [\n        Validators.required\n      ]),\n      'email': new FormControl('', [\n        Validators.required,\n        Validators.email\n      ]),\n      'street': new FormControl('', [\n        Validators.required\n      ]),\n      'zip_code': new FormControl('', [\n        Validators.required\n      ]),\n      'city': new FormControl('', [\n        Validators.required\n      ]),\n      'password': new FormControl('', [\n        Validators.required,\n        Validators.minLength(10),\n      ]),\n      'confirm_password': new FormControl('', [\n        Validators.required,\n        this.passwordConfirming.bind(this)\n      ]),\n    });\n  }\n\n  passwordConfirming(fieldControl: FormControl): { invalidConfirmation: boolean } {\n    if(this.registerForm)\n      return (fieldControl.value !== this.registerForm.get('password').value) ?\n        { invalidConfirmation: true } : null;\n  }\n\n  get password() {\n    return this.registerForm.get('password');\n  }\n\n  get confirm_password() {\n    return this.registerForm.get('confirm_password');\n  }\n\n  get email() {\n    return this.registerForm.get('email');\n  }\n\n  onSubmit():boolean {\n    if (this.registerForm.invalid) {\n      return false;\n    } else {\n      this.authService.register(this.registerForm.value)\n      .subscribe((user: User) => {\n        let navigationExtras: NavigationExtras = {\n          queryParams: user\n        }\n        this.router.navigate(['register/successful'], navigationExtras);\n      }, (err) => {\n        console.log('Error', err);\n        this.snackbar.open('Email already registered.', '', {\n          duration: 3000,\n          panelClass: 'fail'\n        });\n      });\n    }\n  }\n\n}\n","module.exports = \"<div class=\\\"container\\\">\\n  <h1>TODO</h1>\\n  <mat-chip-list class=\\\"mat-chip-list-stacked\\\">\\n      <mat-chip selected color=\\\"warn\\\">I18N</mat-chip>\\n      <mat-chip selected color=\\\"accent\\\">Publisher/Subscriber Implementation</mat-chip>\\n      <mat-chip selected color=\\\"accent\\\">Generic User Model</mat-chip>\\n      <mat-chip selected color=\\\"accent\\\">Password reset</mat-chip>\\n      <mat-chip selected>Router animations</mat-chip>\\n    </mat-chip-list>\\n</div>\"","module.exports = \"mat-chip {\\n  max-width: 400px; }\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../user/user';\nimport { Observable, pipe, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { map, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private authenticatedUser: User;\n\n  constructor(private http: HttpClient) {}\n\n  login(loginDetails): Observable<User> {\n    return this.http.post<User>(environment.apiURL + 'api/login',\n      loginDetails)\n      .pipe(map((user) => {\n        this.authenticatedUser = user;\n        return user;\n      }));\n  }\n\n  update(user: Partial<User>): Observable<User>{\n    return this.http.patch<User>(environment.apiURL + `api/user/${this.authenticatedUser.id}`, user)\n    .pipe(map((user: User) => {\n      this.authenticatedUser = user;\n      return user;\n    }));\n  }\n\n  findOne(id: number): Observable<User> {\n    return this.http.get<User>(environment.apiURL + `user/\\${id}`);\n  }\n\n  /**\n   * Used to check if the user is logged in after a page refresh.\n   * It automatically logs in the user and sets the authenticated user\n   * if the server returns a positive response.\n   */\n  checkLogin(): Observable<boolean> {\n    return this.http.get<User>(environment.apiURL + 'api/check-login')\n      .pipe(map((user) => {\n        this.authenticatedUser = user;\n        return user ? true : false;\n      }),\n      catchError(e => {\n        return of(false);\n      }));\n  }\n\n  logout(): Observable<any> {\n    return this.http.post<any>(environment.apiURL + 'api/logout', {})\n      .pipe(map(() => {\n        this.authenticatedUser = null;\n        return null;\n      }));\n  }\n\n  getAuthenticatedUser(): User {\n    return this.authenticatedUser\n  }\n\n  getAuthenticatedProjectId(): number {\n    if(!this.authenticatedUser ||\n      this.authenticatedUser.projects.length === 0)\n      return -1;\n    return this.authenticatedUser.projects[0].id;\n  }\n\n  isProjectOwner(projectId: number): boolean {\n   return this.getAuthenticatedProjectId() === projectId;\n  }\n\n  isAuthenticated(): boolean {\n    return this.authenticatedUser ? true : false\n  }\n\n  register(user: User): Observable<User> {\n    return this.http.post<User>(environment.apiURL + 'api/user',\n      user);\n  }\n\n  confirm(userIdAndToken): Observable<any> {\n    return this.http.post<any>(environment.apiURL + 'api/register/confirm',\n      userIdAndToken);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { pipe, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CsrfService {\n\n  private csrf: string;\n\n  constructor(private http: HttpClient) { }\n\n  requestCSRFToken(): Observable<string> {\n    return this.http.get<any>(environment.apiURL + 'api/csrf-token')\n      .pipe(map((res) => {\n        this.csrf = res._csrf\n        console.log(this.csrf);\n        return res._csrf\n      }));\n  }\n\n  getCSRFToken(): Observable<string> {\n    if(this.csrf)\n      return of(this.csrf);\n    return this.requestCSRFToken();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CsrfService } from './csrf.service';\nimport { environment } from '../../../environments/environment';\nimport { mergeMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpInterceptorService implements HttpInterceptor{\n\n  constructor(private csrfService: CsrfService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if(request.method !== 'GET') {\n      return this.csrfService.getCSRFToken().pipe(mergeMap((csrf) => {\n        request = request.clone({\n          setHeaders: {\n            'X-CSRF-Token': csrf\n          },\n          withCredentials: !environment.production\n        });\n        return next.handle(request);\n      }));\n    }\n    else {\n      request = request.clone({\n        withCredentials: !environment.production\n      });\n      return next.handle(request);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OnlyLoggedInGuard implements CanActivate {\n\n  constructor(private authService: AuthService,\n    private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.isAuthenticated())\n      return true;\n    return this.authService.checkLogin().pipe(map(result => {\n      if (!result) {\n        this.router.navigate(['/login'], {\n          queryParams: {\n            return: state.url\n          }\n        });\n        return false;\n      }\n      return true;\n    }\n    ));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule, MatIconModule, MatToolbarModule, MatButtonModule, MatFormFieldModule, MatInputModule, MatGridListModule, MatSnackBarModule, MatProgressSpinnerModule, MatListModule, MatOptionModule, MatSelectModule, MatProgressBarModule, MatBadgeModule, MatChipsModule, MatDialogModule, MatTableModule, MatSortModule, MatSidenavModule, MatTreeModule } from '@angular/material';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material';\nimport { CdkAccordionModule } from '@angular/cdk/accordion';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCardModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatListModule,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    MatProgressBarModule,\n    MatBadgeModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatSidenavModule,\n    CdkAccordionModule,\n    MatTreeModule\n  ],\n  exports: [\n    MatCardModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatListModule,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    MatProgressBarModule,\n    MatBadgeModule, \n    MatChipsModule,\n    MatDialogModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatSidenavModule,\n    CdkAccordionModule,\n    MatTreeModule\n  ],\n  declarations: []\n})\nexport class MaterialDesignModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiURL: 'http://localhost:1337/'\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}